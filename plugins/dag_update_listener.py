# plugins/dag_update_listener.py
from airflow.listeners.listener import hook
from airflow.models.dag import DagModel
from airflow.models import DagBag
from slack_sdk import WebClient
import os
import json
import hashlib
from airflow.models import Variable
from airflow.utils.timezone import utcnow

class DAGUpdateListener:
    """
    Listener, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DAG'–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack
    """
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Slack –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.slack_token = os.environ.get('SLACK_TOKEN')
        self.slack_channel = os.environ.get('SLACK_CHANNEL', '#alerts')
        
        # –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–µ–π —Ñ–∞–π–ª–æ–≤ DAG
        self.hash_var_name = 'dag_file_hashes'
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Slack, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.slack_token:
            self.slack_client = WebClient(token=self.slack_token)
        else:
            print("WARNING: No Slack token provided. Notifications will not be sent.")
            self.slack_client = None

    def compute_file_hash(self, file_path):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç MD5 —Ö–µ—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        try:
            with open(file_path, 'rb') as f:
                return hashlib.md5(f.read()).hexdigest()
        except Exception as e:
            print(f"Error computing hash for {file_path}: {e}")
            return None
    
    def get_dag_metadata(self, dag_id):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ DAG –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Airflow
        """
        from airflow.utils.db import create_session
        
        with create_session() as session:
            dag_model = session.query(DagModel).filter(DagModel.dag_id == dag_id).first()
            if dag_model:
                return {
                    'owners': dag_model.owners,
                    'schedule_interval': dag_model.schedule_interval,
                    'last_parsed_time': dag_model.last_parsed_time
                }
        return None
    
    def notify_slack(self, dag_id, event_type):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack –æ —Å–æ–±—ã—Ç–∏–∏ DAG
        """
        if not self.slack_client:
            print("Slack client not initialized. Skipping notification.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ DAG
        metadata = self.get_dag_metadata(dag_id)
        if not metadata:
            print(f"No metadata found for DAG {dag_id}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ DAG
        dagbag = DagBag()
        dag = dagbag.get_dag(dag_id)
        file_path = dag.fileloc if dag else "Unknown"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if event_type == "added":
            emoji = "‚ûï"
            title = "–ù–æ–≤—ã–π DAG –¥–æ–±–∞–≤–ª–µ–Ω"
        elif event_type == "updated":
            emoji = "üîÑ"
            title = "DAG –æ–±–Ω–æ–≤–ª–µ–Ω"
        else:
            emoji = "üîî"
            title = "–°–æ–±—ã—Ç–∏–µ DAG"
        
        message = f"{emoji} *{title}*\n"
        message += f"*DAG ID:* {dag_id}\n"
        message += f"*–í—Ä–µ–º—è:* {utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC\n"
        message += f"*–§–∞–π–ª:* `{os.path.basename(file_path)}`\n"
        message += f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* `{metadata['schedule_interval'] or 'None'}`\n"
        message += f"*–í–ª–∞–¥–µ–ª–µ—Ü:* {metadata['owners'] or 'None'}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            response = self.slack_client.chat_postMessage(
                channel=self.slack_channel,
                text=message,
                mrkdwn=True
            )
            print(f"Slack notification sent successfully: {response['ts']}")
        except Exception as e:
            print(f"Error sending Slack notification: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
dag_listener = DAGUpdateListener()

@hook('dag')
def dag_modified_listener(event_type, dag_id, *args, **kwargs):
    """
    –•—É–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ DAG'–∞
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ event_type: 'dag_created', 'dag_modified'
    """
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã–π DAG
    if dag_id == "monitor_dag_updates":
        return
    
    print(f"DAG event: {event_type} for DAG {dag_id}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if event_type == 'dag_created':
        dag_listener.notify_slack(dag_id, "added")
    elif event_type == 'dag_modified':
        dag_listener.notify_slack(dag_id, "updated")
